/* 
 * barcodeapi
 *
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Cloudmersive.APIClient.NET.Barcode.Client;
using Cloudmersive.APIClient.NET.Barcode.Api;

namespace Cloudmersive.APIClient.NET.Barcode.Test
{
    /// <summary>
    ///  Class for testing GenerateBarcodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class GenerateBarcodeApiTests
    {
        private GenerateBarcodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GenerateBarcodeApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GenerateBarcodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' GenerateBarcodeApi
            //Assert.IsInstanceOfType(typeof(GenerateBarcodeApi), instance, "instance is a GenerateBarcodeApi");
        }

        
        /// <summary>
        /// Test GenerateBarcodeEAN13
        /// </summary>
        [Test]
        public void GenerateBarcodeEAN13Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //var response = instance.GenerateBarcodeEAN13(value);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GenerateBarcodeEAN8
        /// </summary>
        [Test]
        public void GenerateBarcodeEAN8Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //var response = instance.GenerateBarcodeEAN8(value);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GenerateBarcodeQRCode
        /// </summary>
        [Test]
        public void GenerateBarcodeQRCodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //var response = instance.GenerateBarcodeQRCode(value);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GenerateBarcodeUPCA
        /// </summary>
        [Test]
        public void GenerateBarcodeUPCATest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //var response = instance.GenerateBarcodeUPCA(value);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
        /// <summary>
        /// Test GenerateBarcodeUPCE
        /// </summary>
        [Test]
        public void GenerateBarcodeUPCETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string value = null;
            //var response = instance.GenerateBarcodeUPCE(value);
            //Assert.IsInstanceOf<byte[]> (response, "response is byte[]");
        }
        
    }

}
