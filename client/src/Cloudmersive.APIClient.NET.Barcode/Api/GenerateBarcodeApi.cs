/* 
 * barcodeapi
 *
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.Barcode.Client;

namespace Cloudmersive.APIClient.NET.Barcode.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGenerateBarcodeApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>byte[]</returns>
        byte[] GenerateBarcodeEAN13 (string value);

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateBarcodeEAN13WithHttpInfo (string value);
        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>byte[]</returns>
        byte[] GenerateBarcodeEAN8 (string value);

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateBarcodeEAN8WithHttpInfo (string value);
        /// <summary>
        /// Generate a QR code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>byte[]</returns>
        byte[] GenerateBarcodeQRCode (string value);

        /// <summary>
        /// Generate a QR code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateBarcodeQRCodeWithHttpInfo (string value);
        /// <summary>
        /// Generate a UPC-A code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>byte[]</returns>
        byte[] GenerateBarcodeUPCA (string value);

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateBarcodeUPCAWithHttpInfo (string value);
        /// <summary>
        /// Generate a UPC-E code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>byte[]</returns>
        byte[] GenerateBarcodeUPCE (string value);

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GenerateBarcodeUPCEWithHttpInfo (string value);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateBarcodeEAN13Async (string value);

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeEAN13AsyncWithHttpInfo (string value);
        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateBarcodeEAN8Async (string value);

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeEAN8AsyncWithHttpInfo (string value);
        /// <summary>
        /// Generate a QR code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateBarcodeQRCodeAsync (string value);

        /// <summary>
        /// Generate a QR code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeQRCodeAsyncWithHttpInfo (string value);
        /// <summary>
        /// Generate a UPC-A code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateBarcodeUPCAAsync (string value);

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeUPCAAsyncWithHttpInfo (string value);
        /// <summary>
        /// Generate a UPC-E code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GenerateBarcodeUPCEAsync (string value);

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file
        /// </summary>
        /// <remarks>
        /// Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeUPCEAsyncWithHttpInfo (string value);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GenerateBarcodeApi : IGenerateBarcodeApi
    {
        private Cloudmersive.APIClient.NET.Barcode.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateBarcodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GenerateBarcodeApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.Barcode.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.Barcode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GenerateBarcodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GenerateBarcodeApi(Cloudmersive.APIClient.NET.Barcode.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.Barcode.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.Barcode.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.Barcode.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.Barcode.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateBarcodeEAN13 (string value)
        {
             ApiResponse<byte[]> localVarResponse = GenerateBarcodeEAN13WithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GenerateBarcodeEAN13WithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeEAN13");

            var localVarPath = "/barcode/generate/ean-13";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeEAN13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateBarcodeEAN13Async (string value)
        {
             ApiResponse<byte[]> localVarResponse = await GenerateBarcodeEAN13AsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a EAN-13 code barcode as PNG file Validates and generate a EAN-13 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeEAN13AsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeEAN13");

            var localVarPath = "/barcode/generate/ean-13";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeEAN13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateBarcodeEAN8 (string value)
        {
             ApiResponse<byte[]> localVarResponse = GenerateBarcodeEAN8WithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GenerateBarcodeEAN8WithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeEAN8");

            var localVarPath = "/barcode/generate/ean-8";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeEAN8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateBarcodeEAN8Async (string value)
        {
             ApiResponse<byte[]> localVarResponse = await GenerateBarcodeEAN8AsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a EAN-8 code barcode as PNG file Validates and generate a EAN-8 barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">Barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeEAN8AsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeEAN8");

            var localVarPath = "/barcode/generate/ean-8";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeEAN8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a QR code barcode as PNG file Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateBarcodeQRCode (string value)
        {
             ApiResponse<byte[]> localVarResponse = GenerateBarcodeQRCodeWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a QR code barcode as PNG file Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GenerateBarcodeQRCodeWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeQRCode");

            var localVarPath = "/barcode/generate/qrcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeQRCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a QR code barcode as PNG file Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateBarcodeQRCodeAsync (string value)
        {
             ApiResponse<byte[]> localVarResponse = await GenerateBarcodeQRCodeAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a QR code barcode as PNG file Generate a QR code barcode as a PNG file, a type of 2D barcode which can encode free-form text information
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">QR code text to convert into the QR code barcode</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeQRCodeAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeQRCode");

            var localVarPath = "/barcode/generate/qrcode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeQRCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateBarcodeUPCA (string value)
        {
             ApiResponse<byte[]> localVarResponse = GenerateBarcodeUPCAWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GenerateBarcodeUPCAWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeUPCA");

            var localVarPath = "/barcode/generate/upc-a";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeUPCA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateBarcodeUPCAAsync (string value)
        {
             ApiResponse<byte[]> localVarResponse = await GenerateBarcodeUPCAAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a UPC-A code barcode as PNG file Validate and generate a UPC-A barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-A barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeUPCAAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeUPCA");

            var localVarPath = "/barcode/generate/upc-a";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeUPCA", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>byte[]</returns>
        public byte[] GenerateBarcodeUPCE (string value)
        {
             ApiResponse<byte[]> localVarResponse = GenerateBarcodeUPCEWithHttpInfo(value);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > GenerateBarcodeUPCEWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeUPCE");

            var localVarPath = "/barcode/generate/upc-e";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeUPCE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> GenerateBarcodeUPCEAsync (string value)
        {
             ApiResponse<byte[]> localVarResponse = await GenerateBarcodeUPCEAsyncWithHttpInfo(value);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a UPC-E code barcode as PNG file Validates and generate a UPC-E barcode as a PNG file, a type of 1D barcode
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.Barcode.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="value">UPC-E barcode value to generate from</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> GenerateBarcodeUPCEAsyncWithHttpInfo (string value)
        {
            // verify the required parameter 'value' is set
            if (value == null)
                throw new ApiException(400, "Missing required parameter 'value' when calling GenerateBarcodeApi->GenerateBarcodeUPCE");

            var localVarPath = "/barcode/generate/upc-e";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (value != null && value.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(value); // http body (model) parameter
            }
            else
            {
                localVarPostBody = value; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GenerateBarcodeUPCE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
