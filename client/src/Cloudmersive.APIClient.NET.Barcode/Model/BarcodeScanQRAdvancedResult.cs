/* 
 * barcodeapi
 *
 * Barcode APIs let you generate barcode images, and recognize values from images of barcodes.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Barcode.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Barcode.Model
{
    /// <summary>
    /// Result of the advanced QR barcode scan
    /// </summary>
    [DataContract]
    public partial class BarcodeScanQRAdvancedResult :  IEquatable<BarcodeScanQRAdvancedResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BarcodeScanQRAdvancedResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="resultBarcodes">Results of performing the QR barcode scan operation.</param>
        /// <param name="barcodeCount">Number of barcodes read.</param>
        /// <param name="errorMessage">Error message if any.</param>
        public BarcodeScanQRAdvancedResult(bool? successful = default(bool?), List<BarcodeQRResultItem> resultBarcodes = default(List<BarcodeQRResultItem>), int? barcodeCount = default(int?), string errorMessage = default(string))
        {
            this.Successful = successful;
            this.ResultBarcodes = resultBarcodes;
            this.BarcodeCount = barcodeCount;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Results of performing the QR barcode scan operation
        /// </summary>
        /// <value>Results of performing the QR barcode scan operation</value>
        [DataMember(Name="ResultBarcodes", EmitDefaultValue=false)]
        public List<BarcodeQRResultItem> ResultBarcodes { get; set; }

        /// <summary>
        /// Number of barcodes read
        /// </summary>
        /// <value>Number of barcodes read</value>
        [DataMember(Name="BarcodeCount", EmitDefaultValue=false)]
        public int? BarcodeCount { get; set; }

        /// <summary>
        /// Error message if any
        /// </summary>
        /// <value>Error message if any</value>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BarcodeScanQRAdvancedResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  ResultBarcodes: ").Append(ResultBarcodes).Append("\n");
            sb.Append("  BarcodeCount: ").Append(BarcodeCount).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BarcodeScanQRAdvancedResult);
        }

        /// <summary>
        /// Returns true if BarcodeScanQRAdvancedResult instances are equal
        /// </summary>
        /// <param name="input">Instance of BarcodeScanQRAdvancedResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BarcodeScanQRAdvancedResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.ResultBarcodes == input.ResultBarcodes ||
                    this.ResultBarcodes != null &&
                    this.ResultBarcodes.SequenceEqual(input.ResultBarcodes)
                ) && 
                (
                    this.BarcodeCount == input.BarcodeCount ||
                    (this.BarcodeCount != null &&
                    this.BarcodeCount.Equals(input.BarcodeCount))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.ResultBarcodes != null)
                    hashCode = hashCode * 59 + this.ResultBarcodes.GetHashCode();
                if (this.BarcodeCount != null)
                    hashCode = hashCode * 59 + this.BarcodeCount.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
